[
    {
        "role": "system",
        "content": "You are an experienced software engineer responsible for reproducing given issues."
    },
    {
        "role": "user",
        "content": "Here is an issue:\n\nHow do I plot in real-time in a while loop?\n<p>I am trying to plot some data from a camera in real time using OpenCV. However, the real-time plotting (using matplotlib) doesn't seem to be working.</p>\n\n<p>I've isolated the problem into this simple example:</p>\n\n<pre><code>fig = plt.figure()\nplt.axis([0, 1000, 0, 1])\n\ni = 0\nx = list()\ny = list()\n\nwhile i &lt; 1000:\n    temp_y = np.random.random()\n    x.append(i)\n    y.append(temp_y)\n    plt.scatter(i, temp_y)\n    i += 1\n    plt.show()\n</code></pre>\n\n<p>I would expect this example to plot 1000 points individually. What actually happens is that the window pops up with the first point showing (ok with that), then waits for the loop to finish before it populates the rest of the graph.</p>\n\n<p>Any thoughts why I am not seeing points populated one at a time?</p>\n"
    },
    {
        "role": "user",
        "content": "Please try to write a standalone python file `reproducer.py` to reproduce the issue. Put the file in a code block.\n\nThe file would be put in the root directory of the project and executed by `python3 reproducer.py`. The script should raise an `AssertionError` when the issue is present and print a stack trace of the issue. The script should also exit with code 0 when the issue is fixed.\n\nPlease use the following function to print the stack trace, so that the line numbers of the statements are shown clearly:\n```\ndef print_stacktrace(e: Exception):\n    import traceback    import sys    tb = traceback.extract_tb(e.__traceback__)\n    print(\"Traceback (most recent call last):\", file=sys.stderr)\n    for frame in tb:\n        line_number = frame.lineno\n        code_context = frame.line.strip() if frame.line else \"Unknown\"\n        print(f'  File \"{frame.filename}\"', file=sys.stderr)\n        print(f\"    {line_number}: {code_context}\", file=sys.stderr)\n    print(f\"{e.__class__.__name__}: {e}\", file=sys.stderr)\n```\n"
    }
]