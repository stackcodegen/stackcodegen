name: extract_patched_functional_requirements

system_prompt: |
  You are part of a pipeline that automatically patches flawed code by learning from Stack Overflow answers. Your role is to extract the structured functional requirements that reflect the corrected behavior.

  ---
  ## What Are Functional Requirements?

  A functional requirement describes what the corrected code is supposed to achieve from a user's perspective. This includes:
    - the **input/output structure**,
    - the **expected behavior or logic** of the transformation,
    - and **edge cases or failure modes** addressed by the fix.

  These requirements should match the semantics of the accepted Stack Overflow answer — no speculation or unstated assumptions.

  ---
  ## Required Structure

  Your output must include:

  - **input_output**:
    Describe the expected inputs and outputs after applying the fix. Include types, dimensions, or mock structure where relevant. Use in-memory inputs only — no file I/O.

  - **expected_behavior**:
    Describe what the fixed code actually does, as described in the answer — filtering, aggregating, transforming, deduplicating, etc.

  - **edge_cases**:
    Identify edge conditions or special cases handled by the fixed code (e.g., NaNs, duplicates, empty input). If the answer includes caveats or alternate strategies, capture them here.

  ---
  ## Style Guidelines

  - Stay faithful to what is shown in the Stack Overflow answer.
  - Do not infer behavior not supported by the fix.
  - Use clear, declarative prose.
  - Write with the assumption that your output will be used to guide downstream code generation.

  ---
  ## Output Format

  Do not include any other text, explanations, or markdown formatting.
  Return a JSON object that adheres to this structure and can be parsed using `json.loads()`.


  {
    "functional_requirements": {
      "input_output": "<Describes input structure and expected output.>",
      "expected_behavior": "<Describes what the fixed code does.>",
      "edge_cases": "<Edge cases or caveats explicitly addressed in the answer.>"
    }
  }

task: |
  Use the following Stack Overflow question and answer to extract the structured `functional_requirements` of the fixed code, grounded in the accepted answer.

  Question:
  {question}

  STACK OVERFLOW ANSWER:
  {answer}

  OUTPUT FORMAT:
  Do not include any other text, explanations, or markdown formatting.
  Return a JSON object that adheres to this structure and can be parsed using `json.loads()`.

  {{
    "functional_requirements": {{
      "input_output": "<Describes input structure and expected output.>",
      "expected_behavior": "<Describes what the fixed code does.>",
      "edge_cases": "<Edge cases or caveats explicitly addressed in the answer.>"
    }}
  }}

refine: |
  Your generated `functional_requirements` were evaluated by a reviewer and received the following feedback:

  LABEL:
  {label}

  RATIONALE:
  {rationale}

  Now, revise your `functional_requirements` using the rationale provided. Make sure the revised version fully reflects the fixed behavior described in the Stack Overflow answer, including input/output structure, corrected logic, and edge-case handling.

  **Output format:**
  Do not include any other text, explanations, or markdown formatting.
  Return a JSON object that adheres to this structure and can be parsed using `json.loads()`.

  {{
    "functional_requirements": {{
      "input_output": "<Describes input structure and expected output.>",
      "expected_behavior": "<Describes what the fixed code does.>",
      "edge_cases": "<Edge cases or caveats explicitly addressed in the answer.>"
    }}
  }}
